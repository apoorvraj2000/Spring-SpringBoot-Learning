package com.psl.training.config;

import java.util.Properties;

import javax.sql.DataSource;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.TransactionManager;

@Configuration
@ComponentScan(basePackages = "com.psl.training")
@PropertySource(value = "classpath:/application.properties")
public class BeanConfig {
	//Establish Connection
	
	//responsible for making connection with DB
	
	@Value("${mysql.driver.classname}")
	String driverClassName;
	@Value("${mysql.url}")
	String url;
	@Value("${mysql.username}")
	String username;
	@Value("${mysql.password}")
	String password;
	
	@Bean//(name="dataSource")
	public DataSource getDataSource() {
		DriverManagerDataSource dataSource=new DriverManagerDataSource();
		dataSource.setDriverClassName(driverClassName);
		dataSource.setUrl(url);
		dataSource.setUsername(username);
		dataSource.setPassword(password);
		//URL
		//USERNAME
		//PASSWORD
		return dataSource;
	}
	
	@Bean
	LocalSessionFactoryBean getSessionFactoryBean() {
		LocalSessionFactoryBean sessionFactory=new LocalSessionFactoryBean();
		sessionFactory.setDataSource(getDataSource());
		
		//Set the scan path where JPA entity annotation are present
		sessionFactory.setPackagesToScan("com.psl.training.model");
		
		//Setting hibernate specific properties like show_sql
		Properties prop=new Properties();
		//To print all the sql statement generated by hibernate
		prop.put("hibernate.show_sql",true);
		//Create tables at backend with the help of Entity annotations present 
		prop.put("hibernate.hbm2ddl.auto", "update");//create is not present and alter table if field not present as mention in entity 
		
		sessionFactory.setHibernateProperties(prop);
		return sessionFactory;
	}
	
	
	@Bean
	public TransactionManager getTransactionManager() {
		SessionFactory sf=getSessionFactoryBean().getObject();
		HibernateTransactionManager transactionManager=new HibernateTransactionManager();
		transactionManager.setSessionFactory(sf);
		return transactionManager;
	}
	
}
